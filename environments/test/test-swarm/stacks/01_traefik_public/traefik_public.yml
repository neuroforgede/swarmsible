version: "3.8"

services:
  traefik_ingress:
    image: traefik:v2.8
    
    networks:
      - docker_socket_proxy
      - traefik-public

    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s

    ports:
      - 80:80
    
    command: 
      - traefik
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --providers.docker.endpoint=tcp://docker.socket.proxy.local:2375
      - --entrypoints.http.address=:80 
      # enable this if you need to forward headers via multiple proxies in front of traefik (e.g. a Hetzner LB in front of the swarm)
      # - --entrypoints.http.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8,192.168.0.0/24
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --ping
      - --accesslog
      - --log
      - --api

    deploy:
      mode: replicated
      replicas: 3
      update_config:
        order: stop-first
        parallelism: 1
      rollback_config:
        order: stop-first
        parallelism: 1
      restart_policy:
        condition: on-failure

      resources:
        limits:
          cpus: "2"
          memory: 4096M
        reservations:
          cpus: "0.5"
          memory: 1024M

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"
        - "traefik.http.middlewares.admin-auth.basicauth.users=${USERS}"
        - "traefik.http.routers.traefik-public-http.rule=Host(`${DOMAIN}`)"
        - "traefik.http.routers.traefik-public-http.entrypoints=http"
        - "traefik.http.routers.traefik-public-http.service=api@internal"
        - "traefik.http.routers.traefik-public-http.middlewares=admin-auth"
        - "traefik.http.services.traefik-public.loadbalancer.server.port=8080"

      placement:
        constraints:
          - node.labels.traefik_ingress==1
        preferences:
          - spread: node.labels.host
        # so that the replacement can come up at all
        max_replicas_per_node: 1
            

networks:
  traefik-public:
    driver: overlay
    attachable: true
    name: traefik-public
    driver_opts:
      encrypted: ""
  docker_socket_proxy:
    name: "docker_socket_proxy"
    external: true
