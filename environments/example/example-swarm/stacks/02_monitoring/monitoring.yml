version: "3.8"

services:
  prometheus:
    user: root
    entrypoint: "/etc/prometheus/docker-entrypoint.sh"
    image:  prom/prometheus:v2.36.0
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:9090/metrics"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - net
      - traefik-public
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}'
      - '--web.external-url=https://prometheus-${BASE_DOMAIN}'
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
      - source: prometheus_entrypoint
        target: /etc/prometheus/docker-entrypoint.sh
        mode: 0777
      - source: prometheus_yml
        target: /etc/prometheus/prometheus.yml.template
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 128M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.monitoring-prometheus-http.rule=Host(`prometheus-${BASE_DOMAIN}`) && !PathPrefix(`/metrics`) && !PathPrefix(`/healhtz`)
        - traefik.http.routers.monitoring-prometheus-http.entrypoints=http
        - traefik.http.services.monitoring-prometheus.loadbalancer.server.port=9090
        - traefik.http.middlewares.monitoring-prometheus-auth.basicauth.users=${PROMETHEUS_USERS}
        - traefik.http.routers.monitoring-prometheus-http.middlewares=monitoring-prometheus-auth

  cadvisor:
    image: google/cadvisor
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:8080/metrics"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  docker-engine-events-exporter:
    image: neuroforgede/docker-engine-events-exporter:0.1
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:9000/metrics"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - net
    environment:
      - DOCKER_HOSTNAME={{.Node.Hostname}}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  node-exporter:
    image: prom/node-exporter:latest
    entrypoint: /etc/node-exporter/docker-entrypoint.sh
    # healthcheck:
    #   test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:9100/metrics"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 2
    #   start_period: 10s
    user: root
    networks:
      - net
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    configs:
      - source: nodeexporter_entrypoint
        target: /etc/node-exporter/docker-entrypoint.sh
        mode: 0777
    deploy:
      mode: global
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  grafana:
    entrypoint: /custom_entrypoint.sh
    image: grafana/grafana:9.1.6
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    user: root
    networks:
      - net
      - traefik-public
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana:/var/lib/grafana
    secrets:
      - source: grafana_environment_sh
        target: grafana_environment_sh
    configs:
      - source: grafana_traefik_dash
        target: /etc/grafana/dashboards/traefik-dash.json
      - source: grafana_nodes_dash
        target: /etc/grafana/dashboards/nodes-dash.json
      - source: grafana_prometheus_dash
        target: /etc/grafana/dashboards/prometheus-dash.json
      - source: grafana_services_dash
        target: /etc/grafana/dashboards/services-dash.json

      - source: grafana_dashboards
        target: /etc/grafana/provisioning/dashboards/dashboards.yaml

      - source: grafana_datasource_prometheus
        target: /etc/grafana/provisioning/datasources/prometheus.yaml

      - source: grafana_datasource_entrypoint
        target: /custom_entrypoint.sh
        mode: 0777
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 128M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.monitoring-grafana-http.rule=Host(`grafana-${BASE_DOMAIN}`) && !PathPrefix(`/api/health`) && !PathPrefix(`/metrics`) && !PathPrefix(`/healhtz`)
        - traefik.http.routers.monitoring-grafana-http.entrypoints=http
        - traefik.http.services.monitoring-grafana.loadbalancer.server.port=3000

  alertmanager:
    image: prom/alertmanager:v0.24.0
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:9093/metrics"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - net
      - traefik-public
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alertmanager-${BASE_DOMAIN}'
      - '--data.retention=${ALERTMANAGER_RETENTION:-168h}'
    volumes:
      - alertmanager:/alertmanager
    configs:
      - source: alertmanager_yml
        target: /etc/alertmanager/alertmanager.yml
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.monitoring-alertmanager-http.rule=Host(`alertmanager-${BASE_DOMAIN}`) && !PathPrefix(`/metrics`) && !PathPrefix(`/healhtz`)
        - traefik.http.routers.monitoring-alertmanager-http.entrypoints=http
        - traefik.http.services.monitoring-alertmanager.loadbalancer.server.port=9093
        - traefik.http.middlewares.monitoring-alertmanager-auth.basicauth.users=${ALERTMANAGER_USERS}
        - traefik.http.routers.monitoring-alertmanager-http.middlewares=monitoring-alertmanager-auth

  prom2teams:
    image: idealista/prom2teams:3.3.0
    entrypoint: /bin/sh -c "python /opt/prom2teams/replace_config.py && exec prom2teams --loglevel INFO"
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:8089/metrics"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - net
    environment:
      PROM2TEAMS_CONNECTOR: ${PROM2TEAMS_CONNECTOR}
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

configs:
  node_rules:
    file: ./configs/prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./configs/prometheus/rules/swarm_task.rules.yml
  prometheus_entrypoint:
    file: ./configs/prometheus/conf/docker-entrypoint.sh
  prometheus_yml:
    file: ./configs/prometheus/conf/prometheus.yml

  alertmanager_yml:
    file: ./configs/alertmanager/alertmanager.yml
  
  nodeexporter_entrypoint:
    file: ./configs/node-exporter/conf/docker-entrypoint.sh

  grafana_traefik_dash:
    file: ./configs/grafana/conf/dashboards/traefik-dash.json
  grafana_nodes_dash:
    file: ./configs/grafana/conf/dashboards/nodes-dash.json
  grafana_prometheus_dash:
    file: ./configs/grafana/conf/dashboards/prometheus-dash.json
  grafana_services_dash:
    file: ./configs/grafana/conf/dashboards/services-dash.json
  grafana_datasource_prometheus:
    file: ./configs/grafana/conf/datasources/prometheus.yaml
  grafana_dashboards:
    file: ./configs/grafana/conf/dashboards.yaml
  grafana_datasource_entrypoint:
    file: ./configs/grafana/conf/docker-entrypoint.sh

secrets:
  grafana_environment_sh:
    file: ./secrets/grafana/environment.sh

networks:
  net:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: ""
  traefik-public:
    name: "traefik-public"
    external: true

volumes:
  prometheus:
    driver: hetzner-volume
    driver_opts:
      size: '25'
      fstype: ext4
  grafana:
    driver: hetzner-volume
    driver_opts:
      size: '25'
      fstype: ext4
  alertmanager:
    driver: hetzner-volume
    driver_opts:
      size: '10'
      fstype: ext4